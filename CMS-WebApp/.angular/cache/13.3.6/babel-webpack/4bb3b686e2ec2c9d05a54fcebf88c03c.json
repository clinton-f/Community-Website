{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EventService = /*#__PURE__*/(() => {\n  class EventService {\n    constructor(http) {\n      this.http = http;\n      this.url = 'https://cobblestone-place.netlify.app/api/events/';\n      this._refresh$ = new Subject();\n    } //Every time with save info this will refresh the page.\n\n\n    get refresh$() {\n      return this._refresh$;\n    }\n\n    getEvents() {\n      return this.http.get(this.url);\n    }\n\n    getEvent(_id) {\n      return this.http.get(this.url + _id);\n    }\n\n    deleteEvent(_id) {\n      return this.http.delete(this.url + _id);\n    }\n\n    createEvent(event) {\n      return this.http.post(this.url, event).pipe(tap(() => {\n        this._refresh$.next();\n      }));\n    }\n\n    updateEvent(_id, event) {\n      return this.http.put(this.url + _id, event).pipe(tap(() => {\n        this._refresh$.next();\n      }));\n    }\n\n  }\n\n  EventService.ɵfac = function EventService_Factory(t) {\n    return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EventService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventService,\n    factory: EventService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventService;\n})();","map":null,"metadata":{},"sourceType":"module"}